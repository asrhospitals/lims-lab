import React, { useState } from 'react';
import { CheckCircle, XCircle, Eye, Settings, Building, Shield } from 'lucide-react';

interface PendingDoctor {
  id: string;
  name: string;
  qualification: string;
  specialty: string;
  department: string;
  registrationNumber: string;
  email: string;
  phone: string;
  submittedDate: string;
  status: 'pending' | 'approved' | 'rejected';
}

export const AdminApproval: React.FC = () => {
  const [pendingDoctors, setPendingDoctors] = useState<PendingDoctor[]>([
    {
      id: 'DOC001',
      name: 'Dr. Sarah Johnson',
      qualification: 'MD',
      specialty: 'Cardiology',
      department: 'Internal Medicine',
      registrationNumber: 'MED2024001',
      email: 'sarah.johnson@hospital.com',
      phone: '+1234567890',
      submittedDate: '2024-01-15',
      status: 'pending'
    },
    {
      id: 'DOC002',
      name: 'Dr. Michael Chen',
      qualification: 'DNB',
      specialty: 'Neurology',
      department: 'Internal Medicine',
      registrationNumber: 'MED2024002',
      email: 'michael.chen@hospital.com',
      phone: '+1234567891',
      submittedDate: '2024-01-16',
      status: 'pending'
    },
    {
      id: 'DOC003',
      name: 'Dr. Emily Rodriguez',
      qualification: 'MS',
      specialty: 'Orthopedics',
      department: 'Surgery',
      registrationNumber: 'MED2024003',
      email: 'emily.rodriguez@hospital.com',
      phone: '+1234567892',
      submittedDate: '2024-01-17',
      status: 'pending'
    }
  ]);

  const [selectedDoctor, setSelectedDoctor] = useState<PendingDoctor | null>(null);
  const [showPermissionsModal, setShowPermissionsModal] = useState(false);
  const [permissions, setPermissions] = useState({
    departments: [] as string[],
    hospitalNodes: [] as string[],
    accessScope: 'single' as 'single' | 'multi',
    crossDepartmentAccess: false,
    crossBarcodeAccess: false
  });

  const departments = ['Internal Medicine', 'Surgery', 'Pediatrics', 'Radiology', 'Pathology', 'Emergency'];
  const hospitalNodes = ['Main Hospital', 'North Wing', 'South Wing', 'Lab Center A', 'Lab Center B'];

  const handleApprove = (doctorId: string) => {
    const doctor = pendingDoctors.find(d => d.id === doctorId);
    if (doctor) {
      setSelectedDoctor(doctor);
      setShowPermissionsModal(true);
    }
  };

  const confirmApproval = () => {
    if (selectedDoctor) {
      setPendingDoctors(prev => 
        prev.map(doc => 
          doc.id === selectedDoctor.id 
            ? { ...doc, status: 'approved' as const }
            : doc
        )
      );
      setShowPermissionsModal(false);
      setSelectedDoctor(null);
      alert(`Doctor ${selectedDoctor.name} has been approved with assigned permissions.`);
    }
  };

  const handleReject = (doctorId: string) => {
    const reason = prompt('Please provide a reason for rejection:');
    if (reason) {
      setPendingDoctors(prev => 
        prev.map(doc => 
          doc.id === doctorId 
            ? { ...doc, status: 'rejected' as const }
            : doc
        )
      );
      alert(`Doctor registration rejected. Reason: ${reason}`);
    }
  };

  const handleViewDetails = (doctor: PendingDoctor) => {
    alert(`Doctor Details:\n\nName: ${doctor.name}\nQualification: ${doctor.qualification}\nSpecialty: ${doctor.specialty}\nDepartment: ${doctor.department}\nRegistration: ${doctor.registrationNumber}\nEmail: ${doctor.email}\nPhone: ${doctor.phone}\nSubmitted: ${doctor.submittedDate}`);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'approved':
        return 'bg-green-100 text-green-800';
      case 'rejected':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="bg-gradient-to-r from-purple-600 to-purple-700 px-6 py-8">
          <h2 className="text-2xl font-bold text-white flex items-center">
            <Settings className="w-6 h-6 mr-3" />
            Admin Approval & Permissions Panel
          </h2>
          <p className="text-purple-100 mt-2">Review and approve doctor registrations with permission assignment</p>
        </div>

        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-yellow-800">Pending Approval</p>
                  <p className="text-2xl font-bold text-yellow-900">
                    {pendingDoctors.filter(d => d.status === 'pending').length}
                  </p>
                </div>
                <div className="w-10 h-10 bg-yellow-200 rounded-lg flex items-center justify-center">
                  <Eye className="w-5 h-5 text-yellow-700" />
                </div>
              </div>
            </div>

            <div className="bg-green-50 p-4 rounded-lg border border-green-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-green-800">Approved</p>
                  <p className="text-2xl font-bold text-green-900">
                    {pendingDoctors.filter(d => d.status === 'approved').length}
                  </p>
                </div>
                <div className="w-10 h-10 bg-green-200 rounded-lg flex items-center justify-center">
                  <CheckCircle className="w-5 h-5 text-green-700" />
                </div>
              </div>
            </div>

            <div className="bg-red-50 p-4 rounded-lg border border-red-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-red-800">Rejected</p>
                  <p className="text-2xl font-bold text-red-900">
                    {pendingDoctors.filter(d => d.status === 'rejected').length}
                  </p>
                </div>
                <div className="w-10 h-10 bg-red-200 rounded-lg flex items-center justify-center">
                  <XCircle className="w-5 h-5 text-red-700" />
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Doctor Registration Requests</h3>
            </div>
            
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Doctor Details
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Qualification
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Department
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {pendingDoctors.map((doctor) => (
                    <tr key={doctor.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{doctor.name}</div>
                          <div className="text-sm text-gray-500">{doctor.email}</div>
                          <div className="text-sm text-gray-500">{doctor.registrationNumber}</div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{doctor.qualification}</div>
                        <div className="text-sm text-gray-500">{doctor.specialty}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {doctor.department}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(doctor.status)}`}>
                          {doctor.status.charAt(0).toUpperCase() + doctor.status.slice(1)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                        <button
                          onClick={() => handleViewDetails(doctor)}
                          className="text-blue-600 hover:text-blue-900 p-1 hover:bg-blue-50 rounded"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        {doctor.status === 'pending' && (
                          <>
                            <button
                              onClick={() => handleApprove(doctor.id)}
                              className="text-green-600 hover:text-green-900 p-1 hover:bg-green-50 rounded"
                            >
                              <CheckCircle className="w-4 h-4" />
                            </button>
                            <button
                              onClick={() => handleReject(doctor.id)}
                              className="text-red-600 hover:text-red-900 p-1 hover:bg-red-50 rounded"
                            >
                              <XCircle className="w-4 h-4" />
                            </button>
                          </>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      {/* Permissions Modal */}
      {showPermissionsModal && selectedDoctor && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Shield className="w-5 h-5 mr-2" />
                Assign Permissions - {selectedDoctor.name}
              </h3>
            </div>
            
            <div className="p-6 space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Assign Departments
                </label>
                <div className="grid grid-cols-2 gap-2">
                  {departments.map(dept => (
                    <label key={dept} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={permissions.departments.includes(dept)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setPermissions(prev => ({
                              ...prev,
                              departments: [...prev.departments, dept]
                            }));
                          } else {
                            setPermissions(prev => ({
                              ...prev,
                              departments: prev.departments.filter(d => d !== dept)
                            }));
                          }
                        }}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700">{dept}</span>
                    </label>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Hospital Nodes / Labs
                </label>
                <div className="grid grid-cols-2 gap-2">
                  {hospitalNodes.map(node => (
                    <label key={node} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={permissions.hospitalNodes.includes(node)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setPermissions(prev => ({
                              ...prev,
                              hospitalNodes: [...prev.hospitalNodes, node]
                            }));
                          } else {
                            setPermissions(prev => ({
                              ...prev,
                              hospitalNodes: prev.hospitalNodes.filter(n => n !== node)
                            }));
                          }
                        }}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700">{node}</span>
                    </label>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Access Scope
                </label>
                <div className="space-y-2">
                  <label className="flex items-center space-x-2">
                    <input
                      type="radio"
                      value="single"
                      checked={permissions.accessScope === 'single'}
                      onChange={(e) => setPermissions(prev => ({
                        ...prev,
                        accessScope: e.target.value as 'single' | 'multi'
                      }))}
                      className="border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-700">Single Department</span>
                  </label>
                  <label className="flex items-center space-x-2">
                    <input
                      type="radio"
                      value="multi"
                      checked={permissions.accessScope === 'multi'}
                      onChange={(e) => setPermissions(prev => ({
                        ...prev,
                        accessScope: e.target.value as 'single' | 'multi'
                      }))}
                      className="border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-700">Multi Department</span>
                  </label>
                </div>
              </div>

              <div className="space-y-3">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={permissions.crossDepartmentAccess}
                    onChange={(e) => setPermissions(prev => ({
                      ...prev,
                      crossDepartmentAccess: e.target.checked
                    }))}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">
                    Allow report access to non-parent departments
                  </span>
                </label>
                
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={permissions.crossBarcodeAccess}
                    onChange={(e) => setPermissions(prev => ({
                      ...prev,
                      crossBarcodeAccess: e.target.checked
                    }))}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">
                    Enable cross-barcode test view
                  </span>
                </label>
              </div>
            </div>

            <div className="p-6 border-t border-gray-200 flex justify-end space-x-3">
              <button
                onClick={() => setShowPermissionsModal(false)}
                className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={confirmApproval}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                Approve with Permissions
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};